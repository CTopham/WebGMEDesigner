/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Apr 20 2021 11:12:24 GMT-0400 (Eastern Daylight Time).
 */

define(['jointjs', 'css!./styles/PetriVizWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'petri-viz';

    function PetriVizWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointPN = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointPN,
            interactive: false
        });

                // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmePN) {
                // console.log(self._webgmeSM.id2place[currentElement.id]);
                self._setCurrentState(self._webgmePN.id2state[currentElement.id]);
            }
        });
        this._webgmePN = null;
    };

    //     // Create a dummy header
    //     this._el.append('<h3>PetriViz Events:</h3>');

    //     // Registering to events can be done with jQuery (as normal)
    //     this._el.on('dblclick', function (event) {
    //         event.stopPropagation();
    //         event.preventDefault();
    //         self.onBackgroundDblClick();
    //     });
    // };

    PetriVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };


    // State Machine manipulating functions called from the controller
    PetriVizWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        console.log(machineDescriptor);
        self._webgmePN = machineDescriptor;
        self._jointPN.clear();
        const pn = self._webgmePN;
        pn.id2place = {};  

        Object.keys(pn.places).forEach(placeId => {
            let vertex = null;
            console.log(placeId)
            //console.log(pn.places[placeId].position)
            vertex = new joint.shapes.standard.Circle({
                position: pn.places[placeId].position,
                size: { width: 100, height: 100 },
                attrs: {
                    label : {
                        text: pn.places[placeId].name,
                        //event: 'element:label:pointerdown',
                        fontWeight: 'bold',
                        //cursor: 'text',
                        //style: {
                        //    userSelect: 'text'
                        //}
                    },
                    body: {
                        strokeWidth: 3,
                        cursor: 'pointer'
                    }
                }
            });
            vertex.addTo(self._jointPN);
            pn.places[placeId].joint = vertex;
            pn.id2place[vertex.id] = placeId;
        })
    };

    PetriVizWidget.prototype.destroyMachine = function () {

    };

    PetriVizWidget.prototype.fireEvent = function (event) {
        const self = this;
        const current = self._webgmePN.states[self._webgmePN.current];
        const link = current.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), {duration:500}, function() {
           self._webgmePN.current = current.next[event];
           self._decorateMachine();
        });


    };

    PetriVizWidget.prototype.resetMachine = function () {
        this._webgmePN.current = this._webgmePN.init;
        this._decorateMachine();
    };

    PetriVizWidget.prototype._decorateMachine = function() {
        const pn = this._webgmePN;
        Object.keys(pn.states).forEach(stateId => {
            pn.states[stateId].joint.attr('body/stroke', '#333333');
        });
        pn.states[pn.current].joint.attr('body/stroke', 'blue');
        pn.setFireableEvents(Object.keys(pn.states[pn.current].next));
    };

    PetriVizWidget.prototype._setCurrentState = function(newCurrent) {
        this._webgmePN.current = newCurrent;
        this._decorateMachine();
    };
    

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriVizWidget.prototype.destroy = function () {
    };

    PetriVizWidget.prototype.onActivate = function () {
        this._logger.debug('PetriVizWidget has been activated');
    };

    PetriVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriVizWidget has been deactivated');
    };

    return PetriVizWidget;
});
