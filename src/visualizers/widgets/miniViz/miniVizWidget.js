/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Apr 18 2021 21:21:38 GMT-0400 (Eastern Daylight Time).
 */

define(['jointjs', 'css!./styles/miniVizWidget.css'], function (joint) {
    'use strict';
    var WIDGET_CLASS = 'mini-viz';

    function miniVizWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    miniVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointPN = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointPN,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmePN) {
                // console.log(self._webgmePN.id2state[currentElement.id]);
                self._setCurrentState(self._webgmePN.id2state[currentElement.id]);
            }
        });

        this._webgmePN = null;
    };

    miniVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // State Machine manipulating functions called from the controller
    miniVizWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        console.log(machineDescriptor);

        // self._webgmePN = machineDescriptor;
        // self._webgmePN.current = self._webgmePN.init;
        // self._jointPN.clear();
        // const pn = self._webgmePN;
        // pn.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // // first add the places
        // Object.keys(pn.places).forEach(stateId => {
        //     let vertex = null;
        //     if (pn.init === stateId) {
        //         vertex = new joint.shapes.standard.Circle({
        //             position: pn.places[stateId].position,
        //             size: { width: 20, height: 20 },
        //             attrs: {
        //                 body: {
        //                     fill: '#333333',
        //                     cursor: 'pointer'
        //                 }
        //             }
        //         });
        //     } else if (pn.places[stateId].isEnd) {
        //         vertex = new joint.shapes.standard.Circle({
        //             position: pn.places[stateId].position,
        //             size: { width: 30, height: 30 },
        //             attrs: {
        //                 body: {
        //                     fill: '#999999',
        //                     cursor: 'pointer'
        //                 }
        //             }
        //         });
        //     } else {
        //         vertex = new joint.shapes.standard.Circle({
        //             position: pn.places[stateId].position,
        //             size: { width: 60, height: 60 },
        //             attrs: {
        //                 label : {
        //                     text: pn.places[stateId].name,
        //                     //event: 'element:label:pointerdown',
        //                     fontWeight: 'bold',
        //                     //cursor: 'text',
        //                     //style: {
        //                     //    userSelect: 'text'
        //                     //}
        //                 },
        //                 body: {
        //                     strokeWidth: 3,
        //                     cursor: 'pointer'
        //                 }
        //             }
        //         });
        //     }
        //     vertex.addTo(self._jointPN);
        //     pn.places[stateId].joint = vertex;
        //     pn.id2state[vertex.id] = stateId;
        // });

        // // then create the links
        // Object.keys(pn.places).forEach(stateId => {
        //     const state = pn.places[stateId];
        //     Object.keys(state.next).forEach(event => {
        //         state.jointNext = state.jointNext || {};
        //         const link = new joint.shapes.standard.Link({
        //             source: {id: state.joint.id},
        //             target: {id: pn.places[state.next[event]].joint.id},
        //             attrs: {
        //                 line: {
        //                     strokeWidth: 2
        //                 },
        //                 wrapper: {
        //                     cursor: 'default'
        //                 }
        //             },
        //             labels: [{
        //                 position: {
        //                     distance: 0.5,
        //                     offset: 0,
        //                     args: {
        //                         keepGradient: true,
        //                         ensureLegibility: true
        //                     }
        //                 },
        //                 attrs: {
        //                     text: {
        //                         text: event,
        //                         fontWeight: 'bold'
        //                     }
        //                 }
        //             }]
        //         });
        //         link.addTo(self._jointPN);
        //         state.jointNext[event] = link;
        //     })
        // });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    miniVizWidget.prototype.fireEvent = function (event) {
        const self = this;
        const current = self._webgmePN.places[self._webgmePN.current];
        const link = current.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), {duration:500}, function() {
           self._webgmePN.current = current.next[event];
           self._decorateMachine();
        });

    };

    miniVizWidget.prototype.resetMachine = function () {
        this._webgmePN.current = this._webgmePN.init;
        this._decorateMachine();
    };

    miniVizWidget.prototype._decorateMachine = function() {
        const pn = this._webgmePN;
        Object.keys(pn.places).forEach(stateId => {
            pn.places[stateId].joint.attr('body/stroke', '#333333');
        });
        pn.places[pn.current].joint.attr('body/stroke', 'blue');
        pn.setFireableEvents(Object.keys(pn.places[sm.current].next));
    };

    miniVizWidget.prototype._setCurrentState = function(newCurrent) {
        this._webgmePN.current = newCurrent;
        this._decorateMachine();
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    miniVizWidget.prototype.destroy = function () {
    };

    miniVizWidget.prototype.onActivate = function () {
        this._logger.debug('miniVizWidget has been activated');
    };

    miniVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('miniVizWidget has been deactivated');
    };

    return miniVizWidget;
});












// - - - - - - - - - Old - - - - -

//         // Create a dummy header
//         this._el.append('<h3>miniViz Events:</h3>');

//         // Registering to events can be done with jQuery (as normal)
//         this._el.on('dblclick', function (event) {
//             event.stopPropagation();
//             event.preventDefault();
//             self.onBackgroundDblClick();
//         });
//     };

//     miniVizWidget.prototype.onWidgetContainerResize = function (width, height) {
//         this._logger.debug('Widget is resizing...');
//     };

//     // Adding/Removing/Updating items
//     miniVizWidget.prototype.addNode = function (desc) {
//         if (desc) {
//             // Add node to a table of nodes
//             var node = document.createElement('div'),
//                 label = 'children';

//             if (desc.childrenIds.length === 1) {
//                 label = 'child';
//             }

//             this.nodes[desc.id] = desc;
//             node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
//                 desc.childrenIds.length + ' ' + label + '.';

//             this._el.append(node);
//             node.onclick = this.onNodeClick.bind(this, desc.id);
//         }
//     };

//     miniVizWidget.prototype.removeNode = function (gmeId) {
//         var desc = this.nodes[gmeId];
//         this._el.append('<div>Removing node "' + desc.name + '"</div>');
//         delete this.nodes[gmeId];
//     };

//     miniVizWidget.prototype.updateNode = function (desc) {
//         if (desc) {
//             this._logger.debug('Updating node:', desc);
//             this._el.append('<div>Updating node "' + desc.name + '"</div>');
//         }
//     };

//     /* * * * * * * * Visualizer event handlers * * * * * * * */

//     miniVizWidget.prototype.onNodeClick = function (/*id*/) {
//         // This currently changes the active node to the given id and
//         // this is overridden in the controller.
//     };

//     miniVizWidget.prototype.onBackgroundDblClick = function () {
//         this._el.append('<div>Background was double-clicked!!</div>');
//     };

//     /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
//     miniVizWidget.prototype.destroy = function () {
//     };

//     miniVizWidget.prototype.onActivate = function () {
//         this._logger.debug('miniVizWidget has been activated');
//     };

//     miniVizWidget.prototype.onDeactivate = function () {
//         this._logger.debug('miniVizWidget has been deactivated');
//     };

//     return miniVizWidget;
// });
