/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Apr 20 2021 11:12:24 GMT-0400 (Eastern Daylight Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function PetriVizControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;

        this._currentNodeParentId = undefined;

        this._networkRootLoaded = false;

        this._fireableEvents = null;

        this._initWidgetEventHandlers();

        // we need to fix the context of this function as it will be called from the widget directly
        //this.setFireableEvents = this.setFireableEvents.bind(this);

        this._logger.debug('ctor finished');
    }

    PetriVizControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    PetriVizControl.prototype.selectedObjectChanged = function (nodeId) {
        var self = this;

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
            self._networkRootLoaded = false;
        }

        self._currentNodeId = nodeId;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 1};  // Territory "rule"

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };


    /* * * * * * * * Node Event Handling * * * * * * * */
    PetriVizControl.prototype._eventCallback = function (events) {
        const self = this;
        //console.log(events);
        events.forEach(event => {
            if (event.eid && 
                event.eid === self._currentNodeId ) {
                    if (event.etype == 'load' || event.etype == 'update') {
                        self._networkRootLoaded = true;
                    } else {
                        self.clearPN();
                        return;
                    }
                }
                
        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait for additional load cycles
            self._initPN();
        }
    };



    PetriVizControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Machine manipulation functions * * * * * * * */
    PetriVizControl.prototype._initPN = function (msg) {
        const self = this;
        //just for the ease of use, lets create a META dictionary
        const rawMETA = self._client.getAllMetaNodes();
        const META = {};
        rawMETA.forEach(node => {
            META[node.getAttribute('name')] = node.getId(); //we just need the id...
        });
        //now we collect all data we need for network visualization
        //we need our states (names, position, type), need the set of next state (with event names)
        // META is name:ID
    
        const pnNode = self._client.getNode(self._currentNodeId);
        const elementIds = pnNode.getChildrenIds(); //childnodes
        const pn = {init: elementIds.slice(-1).pop(), places:{}};
        pn.update = null;
        elementIds.forEach(elementId => {
            const node = self._client.getNode(elementId);
            // the simple way of checking type
            if (node.isTypeOf(META['Place']) || (node.isTypeOf(META['Transition']))) {
                //right now we only interested in places...
                const place = {name: node.getAttribute('name'), next:{}, markers: {}, position: node.getRegistry('position')};
                // one way to check meta-type in the client context - though it does not check for generalization types like place
                // this is in no way optimal, but shows clearly what we are looking for when we collect the data
                const markers = node.getChildrenIds();
                place.markers[node.getAttribute('name')] = markers;
                elementIds.forEach(nextId => {
                    const nextNode = self._client.getNode(nextId);
                    if(nextNode.isTypeOf(META['P2T']) && nextNode.getPointerId('src') === elementId) {
                        place.next[nextNode.getAttribute('name')] = nextNode.getPointerId('dst');
                    }
                    if(nextNode.isTypeOf(META['T2P']) && nextNode.getPointerId('src') === elementId) {
                        place.next[nextNode.getAttribute('name')] = nextNode.getPointerId('dst');
                    }
                });
                pn.places[elementId] = place;
            }
        });
        pn.setFireableEvents = this.setFireableEvents;
        // This is getting triggered by our play button, it passed current node, if its not beginning start deducting
        if (msg == null){
            // Dont deduct any markers, this is initial state
            pn.current = '/4/H'
        }else{
            // Take the current state msg, deduct 1 marker, add 1 marker to next node
            pn.current = msg;// set our current node, just an ID, not an object
            let nexter = null;
            if (msg == '/4/H'){
                nexter = '/4/P'
            }
            else if(msg == '/4/P'){
                nexter = '/4/m'
            }
            else if(msg == '/4/m'){
                nexter = '/4/m'
            };
            pn.update = [msg,nexter];
        }
        self._widget.initMachine(pn);
    };

    PetriVizControl.prototype.clearPN = function () {
        const self = this;
        self._networkRootLoaded = false;
        self._widget.destroyMachine();
    };
    
    PetriVizControl.prototype.setFireableEvents = function (events) {
        this._fireableEvents = events;
        //console.log(this._fireableEvents)
        if (events && events.length > 1) {
            //fill the dropdown button with options
            this.$btnEventSelector.clear();
            events.forEach(event => {
                this.$btnEventSelector.addButton({
                    text: event,
                    title: 'fire event: '+ event,
                    data: {event: event},
                    clickFn: data => {
                        this._widget.fireEvent(data.event);
                    }
                });
            });
        } else if (events && events.length === 0) {
            this._fireableEvents = null;
        }

       //this._displayToolbarItems();
    };


    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriVizControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    PetriVizControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    PetriVizControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    PetriVizControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    PetriVizControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    PetriVizControl.prototype._displayToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    PetriVizControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    PetriVizControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    PetriVizControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnPetriClassification = toolBar.addButton({
            title: 'Petri Classifications',
            icon: 'glyphicon glyphicon-road',
            clickFn: function (/*data*/) {
                const context = self._client.getCurrentPluginContext('miniPlug',self._currentNodeId, []);
                // !!! it is important to fill out or pass an empty object as the plugin config otherwise we might get errors...
                context.pluginConfig = {};
                self._client.runServerPlugin(
                    'miniPlug', 
                    context, 
                    function(err, result){
                        // here comes any additional processing of results or potential errors.
                        console.log('plugin err:', err);
                        console.log('plugin result:', result);
                });
            }
        });
        this._toolbarItems.push(this.$btnPetriClassification);
        this.$btnPetriClassification.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        // Play Button
        this.$btnSingleEvent = toolBar.addButton({
            title: 'Fire event',
            icon: 'glyphicon glyphicon-play',
            clickFn: function (/*data*/) {
                // pass in current node
                //console.log(self._widget._getCurrent())
                // have login in init pn to subtract from current and dd to next
                self._initPN(self._widget._getCurrent())
            }
        });

        // Reset Button
        this.$btnReset = toolBar.addButton({
            title: 'Reset',
            icon: 'glyphicon glyphicon-repeat',
            clickFn: function (/*data*/) {
                self._initPN()
            }
        });
        
        this._toolbarItems.push(this.$btnReset);
        this._toolbarItems.push(this.$btnSingleEvent);
        this.$btnSingleEvent.hide();
        this._toolbarInitialized = true;



    };

    return PetriVizControl;
});
